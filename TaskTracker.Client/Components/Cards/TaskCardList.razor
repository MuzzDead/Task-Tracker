@using AntDesign
@using TaskTracker.Client.DTOs.Card
@using TaskTracker.Client.Components.Cards
@using Microsoft.AspNetCore.Components.Web

<div class="task-card-list">

    @if (Cards?.Any() == true)
    {
        @foreach (var card in Cards)
        {
            <TaskCard Card="card"
                      OnCardClick="OnCardClick" />
        }
    }
    else
    {
        <div class="empty-state">
            <Icon Type="inbox" /> No tasks yet
        </div>
    }

    <div class="add-card-section">
        @if (IsAdding)
        {
            <div class="add-card-form">
                <Input TValue="string"
                       InputRef="@newCardInputRef"
                       @bind-Value="newTitle"
                       Placeholder="Enter a title..."
                       @onkeypress="HandleKeyPress" />

                <Button Type="@ButtonType.Primary"
                        Size="@ButtonSize.Small"
                        Disabled="@string.IsNullOrWhiteSpace(newTitle)"
                        @onclick="Save">
                    Add
                </Button>
                <Button Type="@ButtonType.Text"
                        Size="@ButtonSize.Small"
                        Icon="close"
                        @onclick="Cancel" />
            </div>
        }
        else
        {
            <Button Type="@ButtonType.Text"
                    Icon="plus"
                    @onclick="Start">
                Add a card
            </Button>
        }
    </div>
</div>

@code {
    [Parameter] public List<CardDto> Cards { get; set; } = new();
    [Parameter] public EventCallback<CardDto> OnCardClick { get; set; }
    [Parameter] public EventCallback<string> OnAddCard { get; set; }

    private bool IsAdding;
    private string newTitle = string.Empty;
    private ElementReference newCardInputRef;

    private async Task Start()
    {
        IsAdding = true;
        newTitle = string.Empty;
        StateHasChanged();

        await Task.Yield();
        await newCardInputRef.FocusAsync();
    }

    private Task Cancel()
    {
        IsAdding = false;
        newTitle = string.Empty;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Save()
    {
        if (!string.IsNullOrWhiteSpace(newTitle))
        {
            await OnAddCard.InvokeAsync(newTitle.Trim());
            await Cancel();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Save();
        else if (e.Key == "Escape")
            await Cancel();
    }
}

<style>
    .task-card-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .empty-state {
        color: #888;
        text-align: center;
        margin: 16px 0;
    }

    .add-card-section {
        margin-top: 12px;
    }

    .add-card-form {
        display: flex;
        gap: 8px;
    }
</style>